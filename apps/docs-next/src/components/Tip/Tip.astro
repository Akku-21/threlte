---
import { c } from '$lib/classes'
import TipIcon from '$components/Icons/Tip.astro'
import DangerIcon from '$components/Icons/Danger.astro'
import NoteIcon from '$components/Icons/Note.astro'
import InfoIcon from '$components/Icons/Info.astro'
import ExperimentalIcon from '$components/Icons/Experimental.astro'
import WarningIcon from '$components/Icons/Warning.astro'

interface Props {
  color?: 'orange' | 'blue' | 'green' | 'dark'
  glow?: boolean
  class?: string
  type?: 'note' | 'info' | 'tip' | 'warning' | 'danger' | 'experimental'
  title?: string
}

const colorStyles: Record<NonNullable<Props['color']>, string> = {
  orange: 'bg-orange-800/30 border-orange-500',
  blue: 'bg-blue-800/90 border-blue-500',
  green: 'bg-green-800/30 border-green-500',
  dark: 'bg-blue-800/20 border-blue-500/50'
}

const iconStyles: Record<
  NonNullable<Props['color']> | NonNullable<Props['type']> | 'transparent',
  string
> = {
  transparent: 'bg-transparent',
  orange: 'bg-orange-800/20',
  blue: 'bg-blue-800/20',
  green: 'bg-green-800/20',
  dark: 'bg-blue-800/20',
  danger: 'bg-red-800/60',
  experimental: 'bg-purple-800/50',
  info: 'bg-blue-700/60',
  note: 'bg-blue-700/40',
  tip: 'bg-green-800/80',
  warning: 'bg-yellow-800/50'
}

const glowStyles = {
  orange: 'glow-orange',
  blue: 'glow-blue',
  green: 'glow-green',
  dark: 'glow-blue/50'
}

const typeClasses: Record<NonNullable<Props['type']>, string> = {
  warning: 'bg-yellow-800/30 border-yellow-500',
  tip: colorStyles.green,
  info: 'bg-blue-800/30 border-blue-500',
  note: colorStyles.dark,
  danger: 'bg-red-800/30 border-red-500',
  experimental: 'bg-purple-800/30 border-purple-500'
}

const typeIcons: Record<NonNullable<Props['type']>, any> = {
  warning: WarningIcon,
  tip: TipIcon,
  info: InfoIcon,
  note: NoteIcon,
  danger: DangerIcon,
  experimental: ExperimentalIcon
}

const getClasses = (): string => {
  if (!Astro.props.type) {
    return c(
      colorStyles[Astro.props.color ?? 'blue'],
      !!Astro.props.glow && glowStyles[Astro.props.color ?? 'blue'],
      Astro.props.class ?? ''
    )
  } else {
    return c(typeClasses[Astro.props.type], Astro.props.class ?? '')
  }
}

const Icon = Astro.props.type && typeIcons[Astro.props.type]
---

<div
  class={c(
    'flex w-full flex-row items-stretch gap-0 border rounded-md overflow-hidden tip',
    getClasses()
  )}
>
  <!-- prettier-ignore -->
  <div class={c("flex text-white empty:hidden flex-col items-center justify-center px-2 py-2", iconStyles[Astro.props.type ?? Astro.props.color ?? 'transparent'])}>{Icon ? <Icon class="h-[20px] w-auto" /> : <slot name="Icon" />}</div>

  {
    Astro.props.title && (
      <div class="py-2 px-3 [&>*]:!text-white [&>*:first-child]:mt-0 [&>*:last-child]:mb-0">
        <h4 class="!mb-1 empty:hidden">{Astro.props.title}</h4>
        <div class="text-sm [&>*:first-child]:mt-0 [&>*:last-child]:mb-0">
          <slot />
        </div>
      </div>
    )
  }
  {
    !Astro.props.title && (
      <div class="py-2 px-3 text-sm [&>*:first-child]:mt-0 [&>*:last-child]:mb-0">
        <slot />
      </div>
    )
  }
</div>
